{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\W\\u0142a\\u015Bciciel\\\\Desktop\\\\r-shop\\\\src\\\\index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport rootReducer from \"./store/reducers/rootReducer\";\nimport { Provider } from \"react-redux\";\nimport thunk from \"redux-thunk\";\nimport { reduxFirestore, getFirestore } from \"redux-firestore\";\nimport { reactReduxFirebase, getFirebase } from \"react-redux-firebase\";\nimport fbConfig from \"./config/fbConfig\";\nconst store = createStore(rootReducer, compose(applyMiddleware(thunk.withExtraArgument({\n  getFirebase,\n  getFirestore\n})) //  reactReduxFirebase(fbConfig), // redux binding for firebase\n//  reduxFirestore(fbConfig) // redux bindings for firestore\n));\nReactDOM.render(React.createElement(Provider, {\n  store: store,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 24\n  },\n  __self: this\n}, React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 25\n  },\n  __self: this\n})), document.getElementById(\"root\"));\nserviceWorker.unregister();\n/* rootReducers combines all of our reducers, we pass it to the store\n  Provider surrounds our app and passes the Store into the application\n  it binds redux with our react app\n   \n    we appled thunk middleware to enhance our Store with extra funcionality \n   \n   we will use function withExtraArgument on Thunk. our extra argument will be an object in which we can pass our properies-getFirestore, getFirebase. so no we can use this object with properties 'getFirestore', 'getFirebase' in projectActions as extra argument in our function (thunk allows us to return  a function)\n\n   we are using compose to add multiple store enhancers (our store enhancers are reduxFireStore(), reactReduxFirebase() and applyMiddleware(thunk)(...). Similar to root reduers, where we combine all of our reducers. \n   we need to pass our config file to reduxFireStore(),\n   reactReduxFirebase() so they know where to conntect to\n   */","map":{"version":3,"sources":["C:/Users/Właściciel/Desktop/r-shop/src/index.js"],"names":["React","ReactDOM","App","serviceWorker","createStore","applyMiddleware","compose","rootReducer","Provider","thunk","reduxFirestore","getFirestore","reactReduxFirebase","getFirebase","fbConfig","store","withExtraArgument","render","document","getElementById","unregister"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,cAAT,EAAyBC,YAAzB,QAA6C,iBAA7C;AACA,SAASC,kBAAT,EAA6BC,WAA7B,QAAgD,sBAAhD;AACA,OAAOC,QAAP,MAAqB,mBAArB;AAEA,MAAMC,KAAK,GAAGX,WAAW,CACvBG,WADuB,EAEvBD,OAAO,CACLD,eAAe,CAACI,KAAK,CAACO,iBAAN,CAAwB;AAAEH,EAAAA,WAAF;AAAeF,EAAAA;AAAf,CAAxB,CAAD,CADV,CAEL;AACA;AAHK,CAFgB,CAAzB;AASAV,QAAQ,CAACgB,MAAT,CACE,oBAAC,QAAD;AAAU,EAAA,KAAK,EAAEF,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,CADF,EAIEG,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJF;AAOAhB,aAAa,CAACiB,UAAd;AAEA","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport rootReducer from \"./store/reducers/rootReducer\";\nimport { Provider } from \"react-redux\";\nimport thunk from \"redux-thunk\";\nimport { reduxFirestore, getFirestore } from \"redux-firestore\";\nimport { reactReduxFirebase, getFirebase } from \"react-redux-firebase\";\nimport fbConfig from \"./config/fbConfig\";\n\nconst store = createStore(\n  rootReducer,\n  compose(\n    applyMiddleware(thunk.withExtraArgument({ getFirebase, getFirestore }))\n    //  reactReduxFirebase(fbConfig), // redux binding for firebase\n    //  reduxFirestore(fbConfig) // redux bindings for firestore\n  )\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n\n/* rootReducers combines all of our reducers, we pass it to the store\n  Provider surrounds our app and passes the Store into the application\n  it binds redux with our react app\n   \n    we appled thunk middleware to enhance our Store with extra funcionality \n   \n   we will use function withExtraArgument on Thunk. our extra argument will be an object in which we can pass our properies-getFirestore, getFirebase. so no we can use this object with properties 'getFirestore', 'getFirebase' in projectActions as extra argument in our function (thunk allows us to return  a function)\n\n   we are using compose to add multiple store enhancers (our store enhancers are reduxFireStore(), reactReduxFirebase() and applyMiddleware(thunk)(...). Similar to root reduers, where we combine all of our reducers. \n   we need to pass our config file to reduxFireStore(),\n   reactReduxFirebase() so they know where to conntect to\n   */\n"]},"metadata":{},"sourceType":"module"}